{"/home/travis/build/npmtest/node-npmtest-favicons/test.js":"/* istanbul instrument in package npmtest_favicons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-favicons/lib.npmtest_favicons.js":"/* istanbul instrument in package npmtest_favicons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_favicons = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_favicons = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-favicons/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-favicons && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_favicons */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_favicons\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_favicons.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_favicons.rollup.js'] =\n            local.assetsDict['/assets.npmtest_favicons.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_favicons.__dirname +\n                    '/lib.npmtest_favicons.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-favicons/favicons/index.js":"const _ = require('underscore'),\n    async = require('async'),\n    through2 = require('through2'),\n    clone = require('clone'),\n    mergeDefaults = require('merge-defaults'),\n    configDefaults = require('require-directory')(module, 'config'),\n    helpers = require('./helpers-es5.js'),\n    path = require('path'),\n    toIco = require('to-ico');\n\n(() => {\n\n    'use strict';\n\n    _.mergeDefaults = mergeDefaults;\n\n    function favicons (source, parameters, next) {\n\n        const config = clone(configDefaults),\n            options = _.mergeDefaults(parameters || {}, config.defaults),\n            µ = helpers(options),\n            background = µ.General.background(options.background);\n\n        function createFavicon (sourceset, properties, name, platformOptions, callback) {\n            if (path.extname(name) === '.ico') {\n                async.map(\n                    properties.sizes,\n                    (sizeProperties, cb) => {\n                        const newProperties = clone(properties);\n\n                        newProperties.width = sizeProperties.width;\n                        newProperties.height = sizeProperties.height;\n\n                        const tempName = `favicon-temp-${newProperties.width}x${newProperties.height}.png`;\n\n                        createFavicon(sourceset, newProperties, tempName, platformOptions, cb);\n                    },\n                    (error, results) => {\n                        if (error) {\n                            return callback(error);\n                        }\n\n                        const files = results.map((icoImage) => icoImage.contents);\n\n                        toIco(files)\n                            .then((buffer) => callback(null, { name, contents: buffer }))\n                            .catch(callback);\n                    }\n                );\n            } else {\n                const maximum = Math.max(properties.width, properties.height),\n                    offset = Math.round(maximum / 100 * platformOptions.offset) || 0;\n\n                async.waterfall([\n                    (cb) =>\n                        µ.Images.nearest(sourceset, properties, offset, cb),\n                    (nearest, cb) =>\n                        µ.Images.read(nearest.file, cb),\n                    (buffer, cb) =>\n                        µ.Images.resize(buffer, properties, offset, cb),\n                    (resizedBuffer, cb) =>\n                        µ.Images.create(properties, background, (error, canvas) =>\n                            cb(error, resizedBuffer, canvas)),\n                    (resizedBuffer, canvas, cb) =>\n                        µ.Images.composite(canvas, resizedBuffer, properties, offset, maximum, cb),\n                    (composite, cb) => {\n                        µ.Images.getBuffer(composite, cb);\n                    }\n                ], (error, buffer) =>\n                    callback(error, { name, contents: buffer }));\n            }\n\n        }\n\n        function createHTML (platform, callback) {\n            const html = [];\n\n            async.forEachOf(config.html[platform], (tag, selector, cb) =>\n                µ.HTML.parse(tag, (error, metadata) =>\n                    cb(html.push(metadata) && error)),\n            (error) =>\n                callback(error, html));\n        }\n\n        function createFiles (platform, callback) {\n            const files = [];\n\n            async.forEachOf(config.files[platform], (properties, name, cb) =>\n                µ.Files.create(properties, name, (error, file) =>\n                    cb(files.push(file) && error)),\n            (error) =>\n                callback(error, files));\n        }\n\n        function createFavicons (sourceset, platform, platformOptions, callback) {\n            const images = [];\n\n            async.forEachOf(config.icons[platform], (properties, name, cb) =>\n                createFavicon(sourceset, properties, name, platformOptions, (error, image) =>\n                    cb(images.push(image) && error)),\n            (error) =>\n                callback(error, images));\n        }\n\n        function createPlatform (sourceset, platform, platformOptions, callback) {\n            async.parallel([\n                (cb) =>\n                    createFavicons(sourceset, platform, platformOptions, cb),\n                (cb) =>\n                    createFiles(platform, cb),\n                (cb) =>\n                    createHTML(platform, cb)\n            ], (error, results) =>\n                callback(error, results[0], results[1], results[2]));\n        }\n\n        function createOffline (sourceset, callback) {\n            const response = { images: [], files: [], html: [] };\n\n            async.forEachOf(options.icons, (enabled, platform, cb) => {\n                const platformOptions = µ.General.preparePlatformOptions(platform, enabled);\n\n                if (enabled) {\n                    createPlatform(sourceset, platform, platformOptions, (error, images, files, html) => {\n                        response.images = response.images.concat(images);\n                        response.files = response.files.concat(files);\n                        response.html = response.html.concat(html);\n                        cb(error);\n                    });\n                } else {\n                    return cb(null);\n                }\n            }, (error) =>\n                callback(error, response));\n        }\n\n        function unpack (pack, callback) {\n            const response = { images: [], files: [], html: pack.html.split('\\n') };\n\n            async.each(pack.files, (url, cb) =>\n                µ.RFG.fetch(url, (error, box) =>\n                    cb(response.images.push(box.image) && response.files.push(box.file) && error)),\n            (error) =>\n                callback(error, response));\n        }\n\n        function createOnline (sourceset, callback) {\n            async.waterfall([\n                (cb) =>\n                    µ.RFG.configure(sourceset, config.rfg, cb),\n                (request, cb) =>\n                    µ.RFG.request(request, cb),\n                (pack, cb) =>\n                    unpack(pack, cb)\n            ], (error, results) => {\n                if (error && options.preferOnline) {\n                    createOffline(sourceset, callback)\n                } else {\n                    callback(error, results);\n                }\n            });\n        }\n\n        function create (sourceset, callback) {\n            options.online || options.preferOnline ? createOnline(sourceset, callback) : createOffline(sourceset, callback);\n        }\n\n        async.waterfall([\n            (callback) =>\n                µ.General.source(source, callback),\n            (sourceset, callback) =>\n                create(sourceset, callback),\n            (response, callback) => {\n                if (options.pipeHTML) {\n                    µ.Files.create(response.html, options.html, (error, file) => {\n                        response.files = response.files.concat([file]);\n                        return callback(error, response);\n                    });\n                } else {\n                    return callback(null, response);\n                }\n            }\n        ], (error, response) =>\n            error ? next(error) : next(null, {\n                images: _.compact(response.images),\n                files: _.compact(response.files),\n                html: _.compact(response.html)\n            }));\n    }\n\n    function stream (params, handleHtml) {\n\n        const config = clone(configDefaults),\n            µ = helpers(params);\n\n        function processDocuments (documents, html, callback) {\n            async.each(documents, (document, cb) =>\n                µ.HTML.update(document, html, config.html, cb),\n            (error) =>\n                callback(error));\n        }\n\n        /* eslint func-names: 0, no-invalid-this: 0 */\n        return through2.obj(function (file, encoding, callback) {\n            const that = this;\n\n            if (file.isNull()) {\n                return callback(null, file);\n            }\n\n            if (file.isStream()) {\n                return callback(new Error('[gulp-favicons] Streaming not supported'));\n            }\n\n            async.waterfall([\n                (cb) =>\n                    favicons(file.contents, params, cb),\n                (response, cb) =>\n                    async.each(response.images.concat(response.files), (image, c) => {\n                        that.push(µ.General.vinyl(image));\n                        c();\n                    }, (error) =>\n                        cb(error, response)),\n                (response, cb) => {\n                    if (handleHtml) {\n                        handleHtml(response.html);\n                        return cb(null);\n                    }\n                    if (params.html && !params.pipeHTML) {\n                        const documents = typeof params.html === 'object' ? params.html : [params.html];\n\n                        processDocuments(documents, response.html, cb);\n                    } else {\n                        return cb(null);\n                    }\n                }\n            ], (error) =>\n                callback(error));\n        });\n    }\n\n    module.exports = favicons;\n    module.exports.config = configDefaults;\n    module.exports.stream = stream;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-favicons/favicons/helpers-es5.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/* eslint camelcase: 0, no-shadow: 0 */\n\nvar path = require('path'),\n    fs = require('fs'),\n    _ = require('underscore'),\n    color = require('tinycolor2'),\n    cheerio = require('cheerio'),\n    colors = require('colors'),\n    jsonxml = require('jsontoxml'),\n    sizeOf = require('image-size'),\n    async = require('async'),\n    mkdirp = require('mkdirp'),\n    Jimp = require('jimp'),\n    svg2png = require('svg2png'),\n    File = require('vinyl'),\n    Reflect = require('harmony-reflect'),\n    NRC = require('node-rest-client').Client,\n    PLATFORM_OPTIONS = require('./config/platform-options.json');\n\n(function () {\n\n    'use strict';\n\n    var xmlconfig = { prettyPrint: true, xmlHeader: true, indent: '  ' },\n        client = new NRC(),\n        HEX_MAX = 255,\n        NON_EXISTANT = -1,\n        ROTATE_DEGREES = 90,\n        HTTP_SUCCESS = 200;\n\n    client.setMaxListeners(0);\n\n    function helpers(options) {\n\n        function contains(array, element) {\n            return array.indexOf(element.toLowerCase()) > NON_EXISTANT;\n        }\n\n        function relative(directory) {\n            return path.join(options.path, directory).replace(/\\\\/g, '/');\n        }\n\n        function print(context, message) {\n            var newMessage = '';\n\n            if (options.logging && message) {\n                _.each(message.split(' '), function (item) {\n                    newMessage += ' ' + (/^\\d+x\\d+$/gm.test(item) ? colors.magenta(item) : item);\n                });\n                console.log(colors.green('[Favicons]') + ' ' + context.yellow + ':' + newMessage + '...');\n            }\n        }\n\n        function readFile(filepath, callback) {\n            fs.readFile(filepath, callback);\n        }\n\n        function updateDocument(document, code, tags, next) {\n            var $ = cheerio.load(document, { decodeEntities: false }),\n                target = $('head').length > 0 ? $('head') : $.root(),\n                newCode = cheerio.load(code.join('\\n'), { decodeEntities: false });\n\n            async.each(tags, function (platform, callback) {\n                async.forEachOf(platform, function (tag, selector, cb) {\n                    if (options.replace) {\n                        $(selector).remove();\n                    } else if ($(selector).length) {\n                        newCode(selector).remove();\n                    }\n                    return cb(null);\n                }, callback);\n            }, function (error) {\n                target.append(newCode.html());\n                return next(error, $.html().replace(/^\\s*$[\\n\\r]{1,}/gm, ''));\n            });\n        }\n\n        function preparePlatformOptions(platform, options) {\n            if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object') {\n                options = {};\n            }\n\n            _.each(options, function (value, key) {\n                var platformOptionsRef = PLATFORM_OPTIONS[key];\n\n                if (typeof platformOptionsRef == 'undefined' || platformOptionsRef.platforms.indexOf(platform) == -1) {\n                    return Reflect.deleteProperty(options, key);\n                }\n            });\n\n            _.each(PLATFORM_OPTIONS, function (_ref, key) {\n                var platforms = _ref.platforms;\n                var defaultTo = _ref.defaultTo;\n\n                if (typeof options[key] == 'undefined' && platforms.indexOf(platform) != -1) {\n                    options[key] = defaultTo;\n                }\n            });\n\n            return options;\n        }\n\n        return {\n\n            General: {\n                preparePlatformOptions: preparePlatformOptions,\n                background: function background(hex) {\n                    print('General:background', 'Parsing colour ' + hex);\n                    var rgba = color(hex).toRgb();\n\n                    return Jimp.rgbaToInt(rgba.r, rgba.g, rgba.b, rgba.a * HEX_MAX);\n                },\n                source: function source(_source, callback) {\n                    var sourceset = [];\n\n                    print('General:source', 'Source type is ' + (typeof _source === 'undefined' ? 'undefined' : _typeof(_source)));\n                    if (!_source || !_source.length) {\n                        return callback('No source provided');\n                    } else if (Buffer.isBuffer(_source)) {\n                        sourceset = [{ size: sizeOf(_source), file: _source }];\n                        callback(null, sourceset);\n                    } else if (Array.isArray(_source)) {\n                        async.each(_source, function (file, cb) {\n                            return readFile(file, function (error, buffer) {\n                                if (error) {\n                                    return cb(error);\n                                }\n\n                                sourceset.push({\n                                    size: sizeOf(buffer),\n                                    file: buffer\n                                });\n                                cb(null);\n                            });\n                        }, function (error) {\n                            return callback(error || sourceset.length ? null : 'Favicons source is invalid', sourceset);\n                        });\n                    } else if (typeof _source === 'string') {\n                        readFile(_source, function (error, buffer) {\n                            if (error) {\n                                return callback(error);\n                            }\n\n                            sourceset = [{ size: sizeOf(buffer), file: buffer }];\n                            callback(null, sourceset);\n                        });\n                    } else {\n                        return callback('Invalid source type provided');\n                    }\n                },\n                vinyl: function vinyl(object) {\n                    return new File({\n                        path: object.name,\n                        contents: Buffer.isBuffer(object.contents) ? object.contents : new Buffer(object.contents)\n                    });\n                }\n            },\n\n            HTML: {\n                parse: function parse(html, callback) {\n                    print('HTML:parse', 'HTML found, parsing and modifying source');\n                    var $ = cheerio.load(html),\n                        link = $('*').is('link'),\n                        attribute = link ? 'href' : 'content',\n                        value = $('*').first().attr(attribute);\n\n                    if (path.extname(value)) {\n                        $('*').first().attr(attribute, relative(value));\n                    } else if (value.slice(0, 1) === '#') {\n                        $('*').first().attr(attribute, options.background);\n                    } else if (html.indexOf('application-name') !== NON_EXISTANT || html.indexOf('apple-mobile-web-app-title') !== NON_EXISTANT) {\n                        $('*').first().attr(attribute, options.appName);\n                    }\n                    return callback(null, $.html());\n                },\n                update: function update(document, code, tags, callback) {\n                    var encoding = { encoding: 'utf8' };\n\n                    async.waterfall([function (cb) {\n                        return mkdirp(path.dirname(document), cb);\n                    }, function (made, cb) {\n                        return fs.readFile(document, encoding, function (error, data) {\n                            return cb(null, error ? null : data);\n                        });\n                    }, function (data, cb) {\n                        return data ? updateDocument(data, code, tags, cb) : cb(null, code.join('\\n'));\n                    }, function (html, cb) {\n                        return fs.writeFile(document, html, options, cb);\n                    }], callback);\n                }\n            },\n\n            Files: {\n                create: function create(properties, name, callback) {\n                    print('Files:create', 'Creating file: ' + name);\n                    if (name === 'manifest.json') {\n                        properties.name = options.appName;\n                        properties.short_name = options.appName;\n                        properties.description = options.appDescription;\n                        properties.dir = options.dir;\n                        properties.lang = options.lang;\n                        properties.display = options.display;\n                        properties.orientation = options.orientation;\n                        properties.start_url = options.start_url;\n                        properties.background_color = options.background;\n                        properties.theme_color = options.theme_color;\n                        _.map(properties.icons, function (icon) {\n                            return icon.src = relative(icon.src);\n                        });\n                        properties = JSON.stringify(properties, null, 2);\n                    } else if (name === 'manifest.webapp') {\n                        properties.version = options.version;\n                        properties.name = options.appName;\n                        properties.description = options.appDescription;\n                        properties.developer.name = options.developerName;\n                        properties.developer.url = options.developerURL;\n                        properties.icons = _.mapObject(properties.icons, function (property) {\n                            return relative(property);\n                        });\n                        properties = JSON.stringify(properties, null, 2);\n                    } else if (name === 'browserconfig.xml') {\n                        _.map(properties[0].children[0].children[0].children, function (property) {\n                            if (property.name === 'TileColor') {\n                                property.text = options.background;\n                            } else {\n                                property.attrs.src = relative(property.attrs.src);\n                            }\n                        });\n                        properties = jsonxml(properties, xmlconfig);\n                    } else if (name === 'yandex-browser-manifest.json') {\n                        properties.version = options.version;\n                        properties.api_version = 1;\n                        properties.layout.logo = relative(properties.layout.logo);\n                        properties.layout.color = options.background;\n                        properties = JSON.stringify(properties, null, 2);\n                    } else if (/\\.html$/.test(name)) {\n                        properties = properties.join('\\n');\n                    }\n                    return callback(null, { name: name, contents: properties });\n                }\n            },\n\n            Images: {\n                create: function create(properties, background, callback) {\n                    var jimp = null;\n\n                    print('Image:create', 'Creating empty ' + properties.width + 'x' + properties.height + ' canvas with ' + (properties.transparent ? 'transparent' : background) + ' background');\n                    jimp = new Jimp(properties.width, properties.height, properties.transparent ? 0x00000000 : background, function (error, canvas) {\n                        return callback(error, canvas, jimp);\n                    });\n                },\n                read: function read(file, callback) {\n                    print('Image:read', 'Reading file: ' + file.buffer);\n                    return Jimp.read(file, callback);\n                },\n                nearest: function nearest(sourceset, properties, offset, callback) {\n                    print('Image:nearest', 'Find nearest icon to ' + properties.width + 'x' + properties.height + ' with offset ' + offset);\n\n                    var offsetSize = offset * 2,\n                        width = properties.width - offsetSize,\n                        height = properties.height - offsetSize,\n                        sideSize = Math.max(width, height),\n                        svgSource = _.find(sourceset, function (source) {\n                        return source.size.type == 'svg';\n                    });\n\n                    var nearestIcon = sourceset[0],\n                        nearestSideSize = Math.max(nearestIcon.size.width, nearestIcon.size.height);\n\n                    if (svgSource) {\n                        print('Image:nearest', 'SVG source will be saved as ' + width + 'x' + height);\n                        svg2png(svgSource.file, { height: height, width: width }).then(function (resizedBuffer) {\n                            return callback(null, {\n                                size: sizeOf(resizedBuffer),\n                                file: resizedBuffer\n                            });\n                        }).catch(callback);\n                    } else {\n                        _.each(sourceset, function (icon) {\n                            var max = Math.max(icon.size.width, icon.size.height);\n\n                            if ((nearestSideSize > max || nearestSideSize < sideSize) && max >= sideSize) {\n                                nearestIcon = icon;\n                                nearestSideSize = max;\n                            }\n                        });\n\n                        callback(null, nearestIcon);\n                    }\n                },\n                resize: function resize(image, properties, offset, callback) {\n                    print('Images:resize', 'Resizing image to contain in ' + properties.width + 'x' + properties.height + ' with offset ' + offset);\n                    var offsetSize = offset * 2;\n                    image.contain(properties.width - offsetSize, properties.height - offsetSize, Jimp.HORIZONTAL_ALIGN_CENTER | Jimp.VERTICAL_ALIGN_MIDDLE);\n                    return callback(null, image);\n                },\n                composite: function composite(canvas, image, properties, offset, maximum, callback) {\n                    var offsetSize = offset * 2,\n                        maximumWithOffset = maximum - offsetSize,\n                        offsetHeight = properties.height - maximumWithOffset > 0 ? (properties.height - maximumWithOffset) / 2 : 0,\n                        offsetWidth = properties.width - maximumWithOffset > 0 ? (properties.width - maximumWithOffset) / 2 : 0,\n                        circle = path.join(__dirname, 'mask.png'),\n                        overlay = path.join(__dirname, 'overlay.png');\n\n                    if (properties.rotate) {\n                        print('Images:composite', 'Rotating image by ' + ROTATE_DEGREES);\n                        image.rotate(ROTATE_DEGREES);\n                    }\n\n                    var compositeIcon = function compositeIcon() {\n                        print('Images:composite', 'Compositing ' + maximum + 'x' + maximum + ' favicon on ' + properties.width + 'x' + properties.height + ' canvas with offset ' + offset);\n                        canvas.composite(image, offsetWidth, offsetHeight);\n                    };\n\n                    if (properties.mask) {\n                        print('Images:composite', 'Masking composite image on circle');\n                        async.parallel([function (cb) {\n                            return Jimp.read(circle, cb);\n                        }, function (cb) {\n                            return Jimp.read(overlay, cb);\n                        }], function (error, images) {\n                            images[0].resize(maximum, Jimp.AUTO);\n                            images[1].resize(maximum, Jimp.AUTO);\n                            canvas.mask(images[0], 0, 0);\n                            canvas.composite(images[1], 0, 0);\n                            compositeIcon();\n                            return callback(error, canvas);\n                        });\n                    } else {\n                        compositeIcon();\n                        return callback(null, canvas);\n                    }\n                },\n                getBuffer: function getBuffer(canvas, callback) {\n                    print('Images:getBuffer', 'Collecting image buffer from canvas');\n                    canvas.getBuffer(Jimp.MIME_PNG, callback);\n                }\n            },\n\n            RFG: {\n                configure: function configure(sourceset, request, callback) {\n                    print('RFG:configure', 'Configuring RFG API request');\n                    var svgSource = _.find(sourceset, function (source) {\n                        return source.size.type == 'svg';\n                    });\n                    options.background = '#' + color(options.background).toHex();\n                    request.master_picture.content = (svgSource || _.max(sourceset, function (_ref2) {\n                        var _ref2$size = _ref2.size;\n                        var width = _ref2$size.width;\n                        var height = _ref2$size.height;\n                        return Math.max(width, height);\n                    })).file.toString('base64');\n                    request.files_location.path = options.path;\n\n                    if (options.icons.android) {\n                        request.favicon_design.android_chrome.theme_color = options.background;\n                        request.favicon_design.android_chrome.manifest.name = options.appName;\n                        request.favicon_design.android_chrome.manifest.display = options.display;\n                        request.favicon_design.android_chrome.manifest.orientation = options.orientation;\n                    } else {\n                        Reflect.deleteProperty(request.favicon_design, 'android_chrome');\n                    }\n\n                    if (options.icons.appleIcon) {\n                        var appleIconOptions = preparePlatformOptions('appleIcon', options.icons.appleIcon);\n                        request.favicon_design.ios.background_color = options.background;\n                        request.favicon_design.ios.margin = Math.round(57 / 100 * appleIconOptions.offset);\n                    } else {\n                        Reflect.deleteProperty(request.favicon_design, 'ios');\n                    }\n\n                    if (options.icons.appleStartup) {\n                        request.favicon_design.ios.startup_image.background_color = options.background;\n                    } else if (request.favicon_design.ios) {\n                        Reflect.deleteProperty(request.favicon_design.ios, 'startup_image');\n                    }\n\n                    if (options.icons.coast) {\n                        var coastOptions = preparePlatformOptions('coast', options.icons.coast);\n                        request.favicon_design.coast.background_color = options.background;\n                        request.favicon_design.coast.margin = Math.round(228 / 100 * coastOptions.offset);\n                    } else {\n                        Reflect.deleteProperty(request.favicon_design, 'coast');\n                    }\n\n                    if (!options.icons.favicons) {\n                        Reflect.deleteProperty(request.favicon_design, 'desktop_browser');\n                    }\n\n                    if (options.icons.firefox) {\n                        var firefoxOptions = preparePlatformOptions('firefox', options.icons.firefox);\n                        request.favicon_design.firefox_app.background_color = options.background;\n                        request.favicon_design.firefox_app.margin = Math.round(60 / 100 * firefoxOptions.offset);\n                        request.favicon_design.firefox_app.manifest.app_name = options.appName;\n                        request.favicon_design.firefox_app.manifest.app_description = options.appDescription;\n                        request.favicon_design.firefox_app.manifest.developer_name = options.developerName;\n                        request.favicon_design.firefox_app.manifest.developer_url = options.developerURL;\n                    } else {\n                        Reflect.deleteProperty(request.favicon_design, 'firefox_app');\n                    }\n\n                    if (options.icons.windows) {\n                        request.favicon_design.windows.background_color = options.background;\n                    } else {\n                        Reflect.deleteProperty(request.favicon_design, 'windows');\n                    }\n\n                    if (options.icons.yandex) {\n                        request.favicon_design.yandex_browser.background_color = options.background;\n                        request.favicon_design.yandex_browser.manifest.version = options.version;\n                    } else {\n                        Reflect.deleteProperty(request.favicon_design, 'yandex_browser');\n                    }\n\n                    return callback(null, request);\n                },\n                request: function request(_request, callback) {\n                    print('RFG:request', 'Posting a request to the RFG API');\n                    client.post('http://realfavicongenerator.net/api/favicon', {\n                        data: { favicon_generation: _request },\n                        headers: { 'Content-Type': 'application/json' }\n                    }, function (data, response) {\n                        var result = data.favicon_generation_result;\n\n                        return result && response.statusCode === HTTP_SUCCESS ? callback(null, {\n                            files: result.favicon.files_urls,\n                            html: result.favicon.html_code\n                        }) : callback(result.result.error_message);\n                    });\n                },\n                fetch: function fetch(address, callback) {\n                    var name = path.basename(address),\n                        image = contains(['.png', '.jpg', '.bmp', '.ico', '.svg'], path.extname(name));\n\n                    print('RFG:fetch', 'Fetching ' + (image ? 'image' : 'file') + ' from RFG: ' + address);\n                    client.get(address, function (buffer, response) {\n                        var success = buffer && response.statusCode === HTTP_SUCCESS;\n\n                        return success ? callback(null, {\n                            file: image ? null : { name: name, contents: buffer },\n                            image: image ? { name: name, contents: buffer } : null\n                        }) : callback('Could not fetch URL: ' + address);\n                    });\n                }\n            }\n\n        };\n    }\n\n    module.exports = helpers;\n})();"}